//Method to print the table
void CellularAutomaton::PrintTn(void){
  for (int i=0; i<N_;i++){
    for (int j=0;j<N_;j++){
      printf("%d ",Tn_[i][j]);
    }
    printf("\n");
  }
  printf("\n");
  //Image ima(N_,Tn_);
  //ima.save("DLAclass")
}

//Method to do the time n+1
void CellularAutomaton::NextTime(int n){
  int* Transit=new int[N_];
  for (int i=0; i<N_;i++){
    if (i==0){
      int k=N_-1; //=k-1
      int kk=i+1;//=k+1
      this->ValueNext(n,k,i,kk,Transit);
    }
    else if(i==N_-1){
      int k=i-1; //=k-1
      int kk=0;//=k+1
      this->ValueNext(n,k,i,kk,Transit);
    }
    else {
      int k=i-1; //=k-1
      int kk=i+1;//=k+1
      this->ValueNext(n,k,i,kk,Transit);  
    }
  }
  
  for (int j=0;j<N_;j++){
    Tn_[n+1][j]=Transit[j];
  }
  delete[] Transit;
}
  

//Method to know the value of k at n+1
void CellularAutomaton::ValueNext(int n,int k,int i,int kk,int* Transit){
  if (Tn_[n][k]==0){
    if(Tn_[n][i]==1){ //k-1=0 et k=1 => k de n+1 =1
      Transit[i]=1;
    }
    else if(Tn_[n][kk]==1){
      Transit[i]=1;
    }
    else {
      Transit[i]=0;
    }
  }
  
  else {
    if (Tn_[n][i]==1){
      Transit[i]=0;
    }
    else if(Tn_[n][kk]==1){
      Transit[i]=0;
    }
    else {
      Transit[i]=1;
    }
  }
}

//Method doing n times the cycle of NexTime and printing the table
void CellularAutomaton::MimiCycle(int time){
  this->PrintTn();
  for (int t=0;t<time;t++){
    this->NextTime(t);
    this->PrintTn();
  }
}


//New particle arrive
void DLA::NewParticle(void) {
  x_ = L_/4;
  y_ = L_/4;
  tab_[x_][y_] = 1;
  //begin 0 , first number columns, second lines
  
}

//HUGE cycle of life !!!!!!
void DLA::CycleofLife(void) {
  this->NewParticle();
  this->MvmtUntilEnd();
  
  if (tab_[L_/4][L_/4] != 1){
    if (tab_[(L_/4)+1][L_/4] != 1 and tab_[(L_/4)-1][L_/4] != 1 and
    tab_[L_/4][(L_/4)+1] != 1 and tab_[L_/4][(L_/4)-1] != 1){
      this->CycleofLife();
    }
  }
}

//checking for post-mvmt outside
void DLA::Mvmtout(void){
  if (x_>=L_){
      x_ = L_/4;
      y_ = L_/4;
  }
  else if (x_<0){
      x_ = L_/4;
      y_ = L_/4;
  }
  else if (y_>=L_){
      x_ = L_/4;
      y_ = L_/4;
  }
  else if (y_<0){
      x_ = L_/4;
      y_ = L_/4;
  }
}

//checking for post-mvmt next to some1=> stop
void DLA::MvmtUntilEnd(void){
  
  this->ParticleMvmt();
  
  int N=y_-1;
  int S=y_+1;
  int W=x_-1;
  int E=x_+1;
  
  if (W>=0 and tab_[W][y_]==1){
    this->PrintTab();
  }
  
  else if (E<L_ and tab_[E][y_]==1){
    this->PrintTab();
  }
  
  else if (N>=0 and tab_[x_][N]==1){
    this->PrintTab();
  }
  
  else if (S<L_ and tab_[x_][S]==1){
    this->PrintTab();
  }
  
  else {
    this->PrintTab();
    this->MvmtUntilEnd();
  }
}

void DLA::PrintTab(void){
  for (int i=0; i<L_;i++){
    for (int j=0;j<L_;j++){
      printf("%d ",tab_[i][j]);
    }
    printf("\n");
  }
  printf("\n");
  
  //Image ima(L_,tab_);
  //ima.save("DLAclass")
}

//Particle moves with Bronien movment (north, south, east, west)
void DLA::ParticleMvmt(void){
  /* initialize random seed: */
  int mvmt1= rand() % 4; //0=North 1=S 2=W 3=E
  tab_[x_][y_] = 0;
  if (mvmt1==0){
    y_ = y_-1;
  }
  else if (mvmt1==1){
    y_ = y_+1;
  }
  else if (mvmt1==2){
    x_ = x_-1;
  }
  else if (mvmt1==3){
    x_ = x_+1;
  }
  this->Mvmtout();
  tab_[x_][y_] = 1;
}
